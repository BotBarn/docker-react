name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      # Code aus dem Repository klonen
      - uses: actions/checkout@v2

      # Cache f체r Node.js-Abh채ngigkeiten
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Docker-Image f체r Tests bauen
      - run: docker build --cache-from bhcir/react-test -t bhcir/react-test -f Dockerfile.dev .

      # Tests ausf체hren
      - run: docker run -e CI=true bhcir/react-test npm test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    steps:
      # Code aus dem Repository klonen
      - uses: actions/checkout@v2

      # Docker-Login
      - run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin || exit 1

      # Produktions-Docker-Image bauen mit Cache
      - run: docker build --cache-from bhcir/react-prod -t bhcir/react-prod -f Dockerfile .

      # Docker-Image auf Docker Hub pushen
      - run: docker push bhcir/react-prod


      # Anwendung auf die VM deployen
      - name: Deploy to VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            docker login -u "${{ secrets.DOCKER_USERNAME }}" -p "${{ secrets.DOCKER_PASSWORD }}"
            docker pull bhcir/react-prod
            docker stop react-app || true
            docker rm react-app || true
            docker run -d --name react-app -p 80:80 bhcir/react-prod